
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Threading.Tasks;

namespace Clinic.Models
{
    public class MedicalHistory
    {
        [Key]
        [Required]
        public long Id { get; set; }
        [StringLength(50, ErrorMessage = "Maximum length is {1}")]
        public string Description { get; set; }
<<<<<<< HEAD
        public int PatientId { get; set; }
=======
        [Display(Name = "Patient")]
        public long PatientId { get; set; }
>>>>>>> 1e4981b7417a266729d67455bc456b21bcf0b1c0
        [ForeignKey("PatientId")]
        public Patient Patient { get; set; }
    }
}

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Threading.Tasks;

namespace Clinic.Models
{
    public class Patient
    {
        [Display(Name ="Patient ID")]
        [Key]
        [Required]
        [Range(10000,99999,ErrorMessage ="please enter a valid ID")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]

        public int patientId { get; set; }



        [StringLength(50, ErrorMessage = "Maximum length is {1}")]
        [RegularExpression("^[A-Za-z]+$")]
        [Required (ErrorMessage ="please provide your First name")]
        public string FirstName { get; set; }



        [StringLength(50, ErrorMessage = "Maximum length is {1}")]
        [RegularExpression("^[A-Za-z]+$")]
        [Required(ErrorMessage = "please provide your Last name")]
        public string LastName { get; set; }



        [DataType(DataType.Date)]
        public DateTime? Birthday { get; set; }



        public string Gender { get; set; }



        [DataType(DataType.PhoneNumber)]
        public string PhoneNumber { get; set; }




        [DataType(DataType.EmailAddress)]
        public string Email { get; set; }




        [StringLength(100, ErrorMessage = "Maximum length is {1}")]
        public string Address { get; set; }




        [DataType(DataType.DateTime)]
        public DateTime? RegisterationDate { get; set; }



        [RegularExpression("^\\d{9}$")]
        public string SSN { get; set; }



        public List<Appointment> Appointments { get; set; }
        public List<MedicalHistory> MedicalHistories { get; set; }
<<<<<<< HEAD
        public string Country { get; set; }
=======
        [NotMapped]
        public string PatientName
        {
            get { return $"{FirstName} {LastName}"; }

        }
>>>>>>> 1e4981b7417a266729d67455bc456b21bcf0b1c0
    }
}

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace Clinic.Models
{
    public class Specialization
    {
        [Key]
        [Required]
        public long Id { get; set; }
        [StringLength(50, ErrorMessage = "Maximum length is {1}")]
<<<<<<< HEAD

        [Required]
        [Display(Name = "specialization name")]
        
        [RegularExpression("^[A-Za-z]+$")]
=======
        [Display(Name = "Specialization Name")]
>>>>>>> 1e4981b7417a266729d67455bc456b21bcf0b1c0
        public string SpecializationName { get; set; }

        
    }
}

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Threading.Tasks;

namespace Clinic.Models
{
    public class Appointment
    {
        [Key]
        [Required]
        [Range(1000,9999,ErrorMessage ="please enter a valid appoitment ID")]
        public long appoitmentId { get; set; }



        [Required]
<<<<<<< HEAD
        public int DoctorId { get; set; }
=======
        [Display(Name = "Doctor")]
        public long DoctorId { get; set; }
>>>>>>> 1e4981b7417a266729d67455bc456b21bcf0b1c0
        [ForeignKey("DoctorId")]



        public Doctor Doctor { get; set; }


        [Required]
<<<<<<< HEAD
        public int PatientId { get; set; }
=======
        [Display(Name = "Patient")]
        public long PatientId { get; set; }
>>>>>>> 1e4981b7417a266729d67455bc456b21bcf0b1c0
        [ForeignKey("PatientId")]



        public Patient Patient { get; set; }
        [DataType(DataType.DateTime)]



        public DateTime Reservation { get; set; }
<<<<<<< HEAD


=======
        [Display(Name = "Appointment Type")]
>>>>>>> 1e4981b7417a266729d67455bc456b21bcf0b1c0
        public long AppointmentId { get; set; }
        [ForeignKey("AppointmentId")]
        public AppointmentType AppointmentType { get; set; }
    }
}

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace Clinic.Models
{
    public class AppointmentType
    {
        [Key]
        [Required]
        public long Id { get; set; }
        [StringLength(50, ErrorMessage = "Maximum length is {1}")]

        public string Type { get; set; }
    }
}

using Microsoft.AspNetCore.Mvc.Rendering;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ClinicProject.Models
{

    public class CountryModel
    {

        public CountryModel()
        {

        }

        public CountryModel(string Name)
        {
            Name = name;
        }

        public string name { get; set; }

    }
}
using Microsoft.AspNetCore.Mvc.Rendering;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Threading.Tasks;

namespace Clinic.Models
{
    public class Doctor
    {
        [Key]
        [Required]
        public int DoctorId { get; set; }

        [StringLength(50, ErrorMessage = "Maximum length is {1}")]
        [RegularExpression("^[A-Za-z]+$")]
        public string FirstName { get; set; }

        [StringLength(50, ErrorMessage = "Maximum length is {1}")]
        [RegularExpression("^[A-Za-z]+$")]
        public string LastName { get; set; }
        
        [StringLength(100, ErrorMessage = "Maximum length is {1}")]
        public string Address { get; set; }

        [DataType(DataType.MultilineText)]
        [Column(TypeName = "text")]
        public string Notes { get; set; }
        [DataType(DataType.Currency)]
        public decimal? MonthlySalary { get; set; }
        [DataType(DataType.PhoneNumber)]
        public string PhoneNumber { get; set; }
        [RegularExpression("\b[A-Z]{2}[0-9]{2}(?:[ ]?[0-9]{4}){4}(?!(?:[ ]?[0-9]){3})(?:[ ]?[0-9]{1,2})?\b")]
        public string IBAN { get; set; }
        [DataType(DataType.EmailAddress)]
        public string Email { get; set; }
        public IList<Appointment> Appointments { get; set; }
        [Required]
        [Display(Name = "Specialization")]
        public long SpecializationId { get; set; }
        [ForeignKey("SpecializationId")]
        public Specialization Specialization { get; set; }
        [NotMapped]
        public string DoctorName
        {
            get
            {
                return $"{FirstName} {LastName}";
            }

        }
<<<<<<< HEAD
        public string Country { get; set; }
=======
>>>>>>> 1e4981b7417a266729d67455bc456b21bcf0b1c0
    }
}

using System;

namespace Clinic.Models
{
    public class ErrorViewModel
    {
        public string RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
    }
}
